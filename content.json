{"meta":{"title":"铅笔芯小屋","subtitle":null,"description":"天天开心","author":"一只铅笔芯","url":"https://github.com/penciy/penciy.github.io"},"pages":[{"title":"分类","date":"2019-12-31T16:00:00.000Z","updated":"2023-07-04T16:09:32.000Z","comments":true,"path":"category/index.html","permalink":"https://github.com/penciy/penciy.github.io/category/index.html","excerpt":"","text":""},{"title":"留言板","date":"2019-12-31T16:00:00.000Z","updated":"2023-07-04T16:09:32.000Z","comments":true,"path":"comment/index.html","permalink":"https://github.com/penciy/penciy.github.io/comment/index.html","excerpt":"","text":""},{"title":"赞赏","date":"2019-12-31T16:00:00.000Z","updated":"2023-07-04T16:09:32.000Z","comments":false,"path":"donate/index.html","permalink":"https://github.com/penciy/penciy.github.io/donate/index.html","excerpt":"","text":"如果喜欢我的博客，或者喜欢我的博客主题，可以考虑赞赏一下哦，非常感激！网站所需的服务器和 CDN 都是不小的开支，日常维护也需要大量精力。 你们的支持是我前进的最大动力！"},{"title":"友情链接","date":"2019-12-31T16:00:00.000Z","updated":"2023-07-04T16:09:32.000Z","comments":false,"path":"friend/index.html","permalink":"https://github.com/penciy/penciy.github.io/friend/index.html","excerpt":"","text":"欢迎各位朋友前来交换友链，本站友链接受以下类型的网站： 个人博客 公益组织等非盈利性网站 不接受广告、商业性网站，特殊情况除外 如果你的网站 一个月以上无法正常访问 将会被移除。"},{"title":"关于","date":"2019-12-31T16:00:00.000Z","updated":"2023-07-04T16:09:32.000Z","comments":false,"path":"about/index.html","permalink":"https://github.com/penciy/penciy.github.io/about/index.html","excerpt":"","text":"关于我我是一个在命运长河里挣扎的小鱼，90后，目前是小白一枚。虽然心中不甘，但是目前确实是 Worst One 。目标是成为全栈工程师、系统架构师。虽然前路迷茫，但是我会一步一步往前走。 关于主题Hexo - LiveForCode 主题是根据 BNDong 的博客样式复制过来的，其中也借鉴了 Hexo - NexT 主题的样式。可能这个主题还有很多不尽人意的地方，在后续的阶段我会不断地完善，如果有关于主题的相关问题，欢迎联系我。"},{"title":"标签","date":"2019-12-31T16:00:00.000Z","updated":"2023-07-04T16:09:32.000Z","comments":true,"path":"tag/index.html","permalink":"https://github.com/penciy/penciy.github.io/tag/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"Tarjan强连通分量-割点-割边","date":"2024-04-19T14:39:37.868Z","updated":"2024-03-08T10:29:36.000Z","comments":true,"path":"posts/0/","link":"","permalink":"https://github.com/penciy/penciy.github.io/posts/0/","excerpt":"","text":"强连通分量模板Tarjan求有向图的强连通分量： // Tarjan求强连通分量板子 // 全局变量 int time = 1; // 当前时间戳 Deque&lt;Integer&gt; stk = new ArrayDeque&lt;&gt;(); int[] dfn; // 某节点被dfs访问到的时间 int[] low; // 某节点能通过其出边回溯到的最早时间 boolean[] inStack; // 节点是否在栈中，用于处理存在自环且除自环外无出边的点 public List&lt;List&lt;Integer&gt;&gt; tarjan(List&lt;Integer&gt;[] g)&#123; int n = g.length; dfn = new int[n]; low = new int[n]; inStack = new boolean[n]; List&lt;List&lt;Integer&gt;&gt; ret = new ArrayList&lt;&gt;(); for(int i = 0;i &lt; n;++i) if(dfn[i] == 0) dfs(g, i, ret); return ret; &#125; public void dfs(List&lt;Integer&gt;[] g, int cur, List&lt;List&lt;Integer&gt;&gt; ret)&#123; dfn[cur] = time; low[cur] = time; ++time; stk.push(cur); inStack[cur] = true; for(int nxt: g[cur])&#123; if(dfn[nxt] == 0) &#123; dfs(g, nxt, ret); low[cur] = Math.min(low[cur], low[nxt]); &#125; else if(inStack[nxt])&#123; low[cur] = Math.min(low[cur], low[nxt]); &#125; &#125; // 当节点的low与dfn相等，说明它无法回溯到更早的时间点，它就是一个强连通分量的顶点 if(low[cur] == dfn[cur])&#123; List&lt;Integer&gt; ls = new ArrayList&lt;&gt;(); int top = -1; do&#123; top = stk.pop(); ls.add(top); inStack[top] = false; &#125;while(top != cur); ret.add(ls); &#125; &#125; 时间复杂度：O(V+E) 注：Tarjan求强连通分量适用于有向图，无向图的连通分量直接用并查集就行。 题目802. 找到最终的安全状态 - 力扣（LeetCode） 割点/割边模板适用于无向连通图 int time = 1; int[] dfn; int[] low; List&lt;List&lt;Integer&gt;&gt; edges = new ArrayList&lt;&gt;(); List&lt;Integer&gt; points = new ArrayList&lt;&gt;(); Set&lt;Integer&gt; seenPoint = new HashSet&lt;&gt;(); public void Tarjan(List&lt;Integer&gt;[] g)&#123; int n = g.length; dfn = new int[n]; low = new int[n]; dfs(g, 0, -1); &#125; public void dfs(List&lt;Integer&gt;[] g, int cur, int fa)&#123; dfn[cur] = time; low[cur] = time; time++; int sonCnt = 0; for(int nxt: g[cur])&#123; if(nxt == fa) continue; if(dfn[nxt] == 0)&#123; sonCnt++; dfs(g, nxt, cur); low[cur] = Math.min(low[cur], low[nxt]); // 割边判据1：low[nxt] &gt; dfn[cur]，则cur-nxt为割边 if(low[nxt] &gt; dfn[cur])&#123; List&lt;Integer&gt; edge = new ArrayList&lt;&gt;(); edge.add(cur); edge.add(nxt); edges.add(edge); &#125; // 割点判据1：cur非根节点，且存在一个孩子nxt满足low[nxt] &gt;= dfn[cur] if(seenPoint.contains(cur)) continue; if(fa != -1 &amp;&amp; low[nxt] &gt;= dfn[cur])&#123; points.add(cur); seenPoint.add(cur); &#125; &#125; else&#123; low[cur] = Math.min(low[cur], dfn[nxt]); // 注意这里不要用low[nxt]更新 &#125; // 割点判据2：cur为根节点，且存在至少两个子树 if(fa == -1 &amp;&amp; sonCnt &gt;= 2) points.add(cur); &#125; &#125; 题目1192. 查找集群内的关键连接 - 力扣（LeetCode）———-割边 1489. 找到最小生成树里的关键边和伪关键边 - 力扣（LeetCode）———-割边、缩点 注意本题在缩点后的图中，是可能存在重复边的，因此不能用父节点作为continue的依据，而应该使用来路的那条边作为continue的依据","categories":[],"tags":[],"keywords":[]},{"title":"Hello World","slug":"hello-world","date":"2024-04-01T15:21:01.019Z","updated":"2024-04-19T13:16:49.520Z","comments":true,"path":"posts/1243066710/","link":"","permalink":"https://github.com/penciy/penciy.github.io/posts/1243066710/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}